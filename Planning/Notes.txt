Basic display of graphics using the old OpenGL format (<3)
----------------------------------------------------------

Installing pygame (as of 1.9.1), should be able to install normally at some point:
  - pip install http://www.pygame.org/ftp/pygame-1.9.1release.tar.gz

Pygame + OpenGL Basics (from the tutorial by sentdex on youtube).

 - use function "glBegin" to start drawing things in OpenGL
  - use glBegin(GL_LINES) to draw lines
  - use glEnd() to end the drawing
 - use function "glVertex3fv" to connect vertices while drawing.
 - always call pygame.init() at the beginning of any pygame call
 - pygame.display.set_mode((800,600), DOUBLEBUF|OPENGL) will set the resolution of view and enable OpenGL viewing.
 - Setting view parameters
  - gluPerspective(field_of_view, aspect_ratio, clipping_plane)
  - glTranslatef(x, y, z) moving the perspective to a different place
  - glRotatef(deg, x, y, z)
 - Basic pygame loop:
  - while True:
   - for event in pygame.event.get():
    - if event.type == pygame.QUIT;
     - pygame.quit()
     - quit()
   - glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
   - run glVertex3fv to draw an object
   - pygame.display.flip()
   - pygame.time.wait(msec_to_wait)

Plan for the WorkspaceViewer object:
 - Set all pygame and OpenGL parameters
 - Set up a gridded floor 3d object
 - contain a set of GraphicalObjects
 - calls glBegin -> calls graphical object display functions -> calls glEnd
 - takes input commands to rotate and move the view

Pygame install dependencies:
 - mercurial
 - python3-dev
 - python3-numpy
 - libav-tools
 - libsdl-image1.2-dev
 - libsdl-mixer1.2-dev
 - libsdl-ttf2.0-dev
 - libsmpeg-dev
 - libsdl1.2-dev
 - libportmidi-dev
 - libswscale-dev
 - libavformat-dev
 - libavcodec-dev


OpenGL Lighting, How to do it
-----------------------------

FROM: www.sjbaker.org/steve/omniv/opengl_lighting.html
 1. glEnable( GL_LIGHTING )
  - This disables face coloring using the glColor*() function
  - We now have to define AMBIENT, DIFFUSE, SPECULAR for all lights and polygons
  - Also have to set EMISSION color for each polygon
  - The final polygon color is the sum of 
 2. Set up a light using the glLight() function
 3. Use the glColorMaterial( GL_FRONT_AND_BACK, GL_EMISSION/GL_AMBIENT_AND_DIFFUSE ) function to color the polygons
 4. glEnable( GL_COLOR_MATERIAL )
 5. Then using glColor() ???
 6. Make sure that glNormal is used for all vetices... No word on how...

What different types of light do:
 - Ambient
  - Light that spread in all directions equally. Makes objects appear to be flat
 - Diffuse
  - Light that is reflected from the surface of the object in all directions.
 - Specular
  - Light that is reflected from the object with the mirror direction seeing the most intensity
 - Emission
  - Light that is generated by the object
